<?php

namespace Tests\Feature;

use Corals\Modules\Advert\Models\Advertiser;
use Corals\Modules\Advert\Models\Banner;
use Corals\Modules\Advert\Models\Campaign;
use Corals\Modules\Advert\Models\Website;
use Corals\Modules\Advert\Models\Zone;
use Corals\User\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Facades\Auth;
use Tests\TestCase;

class ِAdvertTest extends TestCase
{
    use DatabaseTransactions;

    protected $advertRequest;
    protected $campaignRequest;
    protected $siteRequest;
    protected $zoneRequest;
    protected $bannerRequest;
    protected $advert;
    protected $campaign;
    protected $site;
    protected $zone;
    protected $banner;

    protected $name = ['name1', 'name2', 'name3', 'name4', 'campaign', 'zone'];
    protected $status = ['active', 'inactive'];

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = User::query()->whereHas('roles', function ($query) {
            $query->where('name', 'superuser');
        })->first();

        Auth::loginUsingId($user->id);
    }

    public function test_advertiser_view()
    {
        $response = $this->get('/adverts/advertisers');

        $response->assertStatus(200)->assertViewIs('Advert::advertisers.index');

        $this->assertTrue(true);
    }

    public function test_create_advertiser()
    {
        $response = $this->get('/adverts/advertisers/create');

        $response->assertStatus(200)->assertViewIs('Advert::advertisers.create_edit');

        $this->assertTrue(true);
    }

    public function test_store_advertiser()
    {
        $this->advertRequest = [
            'name' => $this->name[array_rand($this->name)],
            'status' => $this->status[array_rand($this->status)],
            'contact' => 'contact!1',
            'email' => 'advert@corals.io',
            'notes' => 'testNote',
        ];

        $response = $this->post('/adverts/advertisers', $this->advertRequest);

        $this->advert = Advertiser::query()->where('name', $this->advertRequest['name'])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('/adverts/advertisers');

        $this->assertDatabaseHas('advert_advertisers', [
            'name' => $this->advert->name,
            'status' => $this->advert->status,
            'contact' => $this->advert->contact,
            'email' => $this->advert->email,
            'notes' => $this->advert->notes,
        ]);

        $this->assertTrue(true);
    }

    public function test_advert_edit()
    {
        $this->test_store_advertiser();
        if ($this->advert) {
            $response = $this->get('/adverts/advertisers/' . $this->advert->hashed_id . '/edit');

            $response->assertViewIs('Advert::advertisers.create_edit')->assertStatus(200);
        }
        $this->assertTrue(true);
    }

    public function test_posts_update()
    {
        $this->test_store_advertiser();

        if ($this->advert) {
            $status = $this->advert->status == 'active' ? 'inactive' : 'active';
            $response = $this->put('adverts/advertisers/' . $this->advert->hashed_id, [
                'name' => $this->advert->name,
                'status' => $status,
                'contact' => $this->advert->contact,
                'email' => $this->advert->email,
                'notes' => $this->advert->notes,
            ]);

            $response->assertRedirect('adverts/advertisers');
            $this->assertDatabaseHas('advert_advertisers', [
                'name' => $this->advert->name,
                'status' => $status,
                'contact' => $this->advert->contact,
                'email' => $this->advert->email,
                'notes' => $this->advert->notes,
            ]);
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Advert Not Found');
        }
    }

    public function test_adverts_delete()
    {
        $this->test_store_advertiser();

        if ($this->advert) {
            $response = $this->delete('adverts/advertisers/' . $this->advert->hashed_id);

            $response->assertStatus(200)->assertSeeText('Advertiser has been deleted successfully.');

            $this->isSoftDeletableModel(Advertiser::class);

            $this->assertDatabaseMissing(
                'advert_advertisers',
                [
                    'name' => $this->advert->name,
                    'status' => $this->advert->status,
                    'contact' => $this->advert->contact,
                    'email' => $this->advert->email,
                    'notes' => $this->advert->notes,
                ]
            );
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Advert Not Found');
        }
    }

    public function test_store_campaign()
    {
        $this->test_store_advertiser();
        $limitType = ['impression', 'click'];
        if ($this->advert) {
            $this->campaignRequest = [
                'name' => $this->name[array_rand($this->name)],
                'status' => $this->status[array_rand($this->status)],
                'starts_at' => now()->toDateString(),
                'ends_at' => now()->addMonth()->toDateString(),
                'advertiser_id' => $this->advert->id,
                'weight' => random_int(0, 100),
                'limit_per_day' => random_int(0, 100),
                'limit_type' => $limitType[array_rand($limitType)],
                'notes' => 'TestNotes',
            ];
            $response = $this->post('/adverts/campaigns', $this->campaignRequest);

            $this->campaign = Campaign::query()->where('name', $this->campaignRequest['name'])->first();

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('/adverts/campaigns');

            $this->assertDatabaseHas('advert_campaigns', [
                'name' => $this->campaign->name,
                'status' => $this->campaign->status,
                'starts_at' => $this->campaign->starts_at,
                'ends_at' => $this->campaign->ends_at,
                'advertiser_id' => $this->campaign->advertiser_id,
                'weight' => $this->campaign->weight,
                'limit_per_day' => $this->campaign->limit_per_day,
                'limit_type' => $this->campaign->limit_type,
                'notes' => $this->campaign->notes,
            ]);
            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Advert Not Found');
        }
    }

    public function test_store_website()
    {
        $this->siteRequest = [
            'name' => $this->name[array_rand($this->name)],
            'status' => $this->status[array_rand($this->status)],
            'url' => route('websites.index'),
            'contact' => 'contact!1',
            'email' => 'site@corals.io',
            'notes' => 'testNote',
        ];


        $response = $this->post('/adverts/websites', $this->siteRequest);

        $this->site = Website::query()->where('name', $this->siteRequest['name'])->first();

        $response->assertDontSee('The given data was invalid')
            ->assertRedirect('/adverts/websites');

        $this->assertDatabaseHas('advert_websites', [
            'name' => $this->site->name,
            'url' => $this->site->url,
            'contact' => $this->site->contact,
            'email' => $this->site->email,
            'status' => $this->site->status,
            'notes' => $this->site->notes,
        ]);

        $this->assertTrue(true);
    }

    public function test_store_zone()
    {
        $dimensions = \Advert::getDimensionsList();

        $this->test_store_website();

        if ($this->site) {
            $this->zoneRequest = [
                'name' => $this->name[array_rand($this->name)],
                'status' => $this->status[array_rand($this->status)],
                'website_id' => $this->site->id,
                'dimension' => $dimensions[array_rand($dimensions)],
                'key' => $this->name[array_rand($this->name)],
                'notes' => 'testNote',
            ];

            $response = $this->post('/adverts/zones', $this->zoneRequest);

            $this->zone = Zone::query()->where('name', $this->zoneRequest['name'])->first();

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('/adverts/zones');

            $this->assertDatabaseHas('advert_zones', [
                'name' => $this->zone->name,
                'website_id' => $this->zone->website_id,
                'status' => $this->zone->status,
                'dimension' => $this->zone->dimension,
                'key' => $this->zone->key,
                'notes' => $this->zone->notes,
            ]);

            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'website Not Found');
        }
    }

    public function test_store_banners()
    {
        $this->test_store_campaign();
        $dimensions = \Advert::getDimensionsList();

        $zonesIds = Zone::query()->where('id', '<>', 0)->pluck('id')->toArray();

        if ($this->campaign) {
            $this->bannerRequest = [
                'name' => $this->name[array_rand($this->name)],
                'status' => $this->status[array_rand($this->status)],
                'dimension' => $dimensions[array_rand($dimensions)],
                'weight' => random_int(0, 100),
                'campaign_id' => $this->campaign->id,
                'url' => route('banners.index'),
                'type' => 'script',
                'script' => '<p>Banners Script</p>',
                'content' => '<p>Banners Script</p>',
                'notes' => 'testNote',
            ];

            $response = $this->post('adverts/banners', $this->bannerRequest);

            $this->banner = Banner::query()->where('campaign_id', $this->campaign->id)->first();

            $response->assertDontSee('The given data was invalid')
                ->assertRedirect('adverts/banners');

            $this->assertDatabaseHas('advert_banners', [
                'name' => $this->banner->name,
                'status' => $this->banner->status,
                'dimension' => $this->banner->dimension,
                'weight' => $this->banner->weight,
                'campaign_id' => $this->banner->campaign_id,
                'url' => $this->banner->url,
                'type' => $this->banner->type,
                'content' => $this->banner->content,
                'notes' => $this->banner->notes,
            ]);

            if (! is_null($zonesIds)) {
                $this->banner->zones()->sync($zonesIds);
            }

            $this->assertTrue(true);
        } else {
            $this->assertFalse(false, 'Campaign Not Found');
        }
    }
}
